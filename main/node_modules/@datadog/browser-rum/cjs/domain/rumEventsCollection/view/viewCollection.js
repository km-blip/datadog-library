"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var browser_core_1 = require("@datadog/browser-core");
var types_1 = require("../../../types");
var typesV2_1 = require("../../../typesV2");
var lifeCycle_1 = require("../../lifeCycle");
var trackViews_1 = require("./trackViews");
function startViewCollection(lifeCycle, configuration, location) {
    lifeCycle.subscribe(lifeCycle_1.LifeCycleEventType.VIEW_UPDATED, function (view) {
        configuration.isEnabled('v2_format')
            ? lifeCycle.notify(lifeCycle_1.LifeCycleEventType.RAW_RUM_EVENT_V2_COLLECTED, processViewUpdateV2(view))
            : lifeCycle.notify(lifeCycle_1.LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, processViewUpdate(view));
    });
    return trackViews_1.trackViews(location, lifeCycle);
}
exports.startViewCollection = startViewCollection;
function processViewUpdate(view) {
    var viewEvent = {
        date: browser_core_1.getTimestamp(view.startTime),
        duration: browser_core_1.msToNs(view.duration),
        evt: {
            category: types_1.RumEventCategory.VIEW,
        },
        rum: {
            documentVersion: view.documentVersion,
        },
        view: {
            loadingTime: browser_core_1.msToNs(view.loadingTime),
            loadingType: view.loadingType,
            measures: tslib_1.__assign(tslib_1.__assign({}, view.eventCounts), { domComplete: browser_core_1.msToNs(view.timings.domComplete), domContentLoaded: browser_core_1.msToNs(view.timings.domContentLoaded), domInteractive: browser_core_1.msToNs(view.timings.domInteractive), firstContentfulPaint: browser_core_1.msToNs(view.timings.firstContentfulPaint), loadEventEnd: browser_core_1.msToNs(view.timings.loadEventEnd) }),
        },
    };
    return {
        rawRumEvent: viewEvent,
        startTime: view.startTime,
    };
}
function processViewUpdateV2(view) {
    var viewEvent = {
        _dd: {
            documentVersion: view.documentVersion,
        },
        date: browser_core_1.getTimestamp(view.startTime),
        type: typesV2_1.RumEventType.VIEW,
        view: {
            action: {
                count: view.eventCounts.userActionCount,
            },
            cumulativeLayoutShift: view.cumulativeLayoutShift,
            domComplete: browser_core_1.msToNs(view.timings.domComplete),
            domContentLoaded: browser_core_1.msToNs(view.timings.domContentLoaded),
            domInteractive: browser_core_1.msToNs(view.timings.domInteractive),
            error: {
                count: view.eventCounts.errorCount,
            },
            firstContentfulPaint: browser_core_1.msToNs(view.timings.firstContentfulPaint),
            firstInputDelay: browser_core_1.msToNs(view.timings.firstInputDelay),
            largestContentfulPaint: browser_core_1.msToNs(view.timings.largestContentfulPaint),
            loadEventEnd: browser_core_1.msToNs(view.timings.loadEventEnd),
            loadingTime: browser_core_1.msToNs(view.loadingTime),
            loadingType: view.loadingType,
            longTask: {
                count: view.eventCounts.longTaskCount,
            },
            resource: {
                count: view.eventCounts.resourceCount,
            },
            timeSpent: browser_core_1.msToNs(view.duration),
        },
    };
    return {
        rawRumEvent: viewEvent,
        startTime: view.startTime,
    };
}
//# sourceMappingURL=viewCollection.js.map