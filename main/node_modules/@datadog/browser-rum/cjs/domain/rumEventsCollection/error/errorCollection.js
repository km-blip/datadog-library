"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var browser_core_1 = require("@datadog/browser-core");
var types_1 = require("../../../types");
var typesV2_1 = require("../../../typesV2");
var lifeCycle_1 = require("../../lifeCycle");
function startErrorCollection(lifeCycle, configuration) {
    return doStartErrorCollection(lifeCycle, configuration, browser_core_1.startAutomaticErrorCollection(configuration));
}
exports.startErrorCollection = startErrorCollection;
function doStartErrorCollection(lifeCycle, configuration, observable) {
    observable.subscribe(function (error) {
        configuration.isEnabled('v2_format')
            ? lifeCycle.notify(lifeCycle_1.LifeCycleEventType.RAW_RUM_EVENT_V2_COLLECTED, processErrorV2(error))
            : lifeCycle.notify(lifeCycle_1.LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, processError(error));
    });
    return {
        addError: function (_a, savedGlobalContext) {
            var error = _a.error, startTime = _a.startTime, customerContext = _a.context, source = _a.source;
            var rawError = computeRawError(error, startTime, source);
            configuration.isEnabled('v2_format')
                ? lifeCycle.notify(lifeCycle_1.LifeCycleEventType.RAW_RUM_EVENT_V2_COLLECTED, tslib_1.__assign({ customerContext: customerContext,
                    savedGlobalContext: savedGlobalContext }, processErrorV2(rawError)))
                : lifeCycle.notify(lifeCycle_1.LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, tslib_1.__assign({ customerContext: customerContext,
                    savedGlobalContext: savedGlobalContext }, processError(rawError)));
        },
    };
}
exports.doStartErrorCollection = doStartErrorCollection;
function computeRawError(error, startTime, source) {
    var stackTrace = error instanceof Error ? browser_core_1.computeStackTrace(error) : undefined;
    return tslib_1.__assign({ startTime: startTime, source: source }, browser_core_1.formatUnknownError(stackTrace, error, 'Provided'));
}
function processError(error) {
    var rawRumEvent = browser_core_1.combine({
        date: browser_core_1.getTimestamp(error.startTime),
        error: {
            kind: error.type,
            origin: error.source,
            stack: error.stack,
        },
        evt: {
            category: types_1.RumEventCategory.ERROR,
        },
        message: error.message,
    }, error.resource
        ? {
            http: {
                method: error.resource.method,
                status_code: error.resource.statusCode,
                url: error.resource.url,
            },
        }
        : undefined);
    return {
        rawRumEvent: rawRumEvent,
        startTime: error.startTime,
    };
}
function processErrorV2(error) {
    var rawRumEvent = {
        date: browser_core_1.getTimestamp(error.startTime),
        error: {
            message: error.message,
            resource: error.resource,
            source: error.source,
            stack: error.stack,
            type: error.type,
        },
        type: typesV2_1.RumEventType.ERROR,
    };
    return {
        rawRumEvent: rawRumEvent,
        startTime: error.startTime,
    };
}
//# sourceMappingURL=errorCollection.js.map