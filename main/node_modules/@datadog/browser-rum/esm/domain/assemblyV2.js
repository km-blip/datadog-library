import { combine, withSnakeCaseKeys } from '@datadog/browser-core';
import { RumEventType, } from '../typesV2';
import { LifeCycleEventType } from './lifeCycle';
var SessionType;
(function (SessionType) {
    SessionType["SYNTHETICS"] = "synthetics";
    SessionType["USER"] = "user";
})(SessionType || (SessionType = {}));
export function startRumAssemblyV2(applicationId, configuration, lifeCycle, session, parentContexts, getGlobalContext) {
    lifeCycle.subscribe(LifeCycleEventType.RAW_RUM_EVENT_V2_COLLECTED, function (_a) {
        var startTime = _a.startTime, rawRumEvent = _a.rawRumEvent, savedGlobalContext = _a.savedGlobalContext, customerContext = _a.customerContext;
        var viewContext = parentContexts.findViewV2(startTime);
        if (session.isTracked() && viewContext && viewContext.session.id) {
            var actionContext = parentContexts.findActionV2(startTime);
            var rumContext = {
                _dd: {
                    formatVersion: 2,
                },
                application: {
                    id: applicationId,
                },
                date: new Date().getTime(),
                service: configuration.service,
                session: {
                    // must be computed on each event because synthetics instrumentation can be done after sdk execution
                    // cf https://github.com/puppeteer/puppeteer/issues/3667
                    type: getSessionType(),
                },
            };
            var rumEvent = needToAssembleWithAction(rawRumEvent)
                ? combine(rumContext, viewContext, actionContext, rawRumEvent)
                : combine(rumContext, viewContext, rawRumEvent);
            var serverRumEvent = withSnakeCaseKeys(rumEvent);
            serverRumEvent.context = combine(savedGlobalContext || getGlobalContext(), customerContext);
            lifeCycle.notify(LifeCycleEventType.RUM_EVENT_V2_COLLECTED, { rumEvent: rumEvent, serverRumEvent: serverRumEvent });
        }
    });
}
function needToAssembleWithAction(event) {
    return [RumEventType.ERROR, RumEventType.RESOURCE, RumEventType.LONG_TASK].indexOf(event.type) !== -1;
}
function getSessionType() {
    return window._DATADOG_SYNTHETICS_BROWSER === undefined ? SessionType.USER : SessionType.SYNTHETICS;
}
//# sourceMappingURL=assemblyV2.js.map