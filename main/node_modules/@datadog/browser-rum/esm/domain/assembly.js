import { combine, withSnakeCaseKeys } from '@datadog/browser-core';
import { RumEventCategory } from '../types';
import { LifeCycleEventType } from './lifeCycle';
var SessionType;
(function (SessionType) {
    SessionType["SYNTHETICS"] = "synthetics";
    SessionType["USER"] = "user";
})(SessionType || (SessionType = {}));
export function startRumAssembly(applicationId, configuration, lifeCycle, session, parentContexts, getGlobalContext) {
    lifeCycle.subscribe(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, function (_a) {
        var startTime = _a.startTime, rawRumEvent = _a.rawRumEvent, savedGlobalContext = _a.savedGlobalContext, customerContext = _a.customerContext;
        var viewContext = parentContexts.findView(startTime);
        if (session.isTracked() && viewContext && viewContext.sessionId) {
            var actionContext = parentContexts.findAction(startTime);
            var rumContext = {
                applicationId: applicationId,
                date: new Date().getTime(),
                service: configuration.service,
                session: {
                    // must be computed on each event because synthetics instrumentation can be done after sdk execution
                    // cf https://github.com/puppeteer/puppeteer/issues/3667
                    type: getSessionType(),
                },
            };
            var rumEvent = needToAssembleWithAction(rawRumEvent)
                ? combine(rumContext, viewContext, actionContext, rawRumEvent)
                : combine(rumContext, viewContext, rawRumEvent);
            var serverRumEvent = combine(savedGlobalContext || getGlobalContext(), customerContext, withSnakeCaseKeys(rumEvent));
            lifeCycle.notify(LifeCycleEventType.RUM_EVENT_COLLECTED, { rumEvent: rumEvent, serverRumEvent: serverRumEvent });
        }
    });
}
function needToAssembleWithAction(event) {
    return ([RumEventCategory.ERROR, RumEventCategory.RESOURCE, RumEventCategory.LONG_TASK].indexOf(event.evt.category) !== -1);
}
function getSessionType() {
    return window._DATADOG_SYNTHETICS_BROWSER === undefined ? SessionType.USER : SessionType.SYNTHETICS;
}
//# sourceMappingURL=assembly.js.map