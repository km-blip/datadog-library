import { __assign } from "tslib";
import { combine, generateUUID, getTimestamp, msToNs, RequestType, ResourceType, } from '@datadog/browser-core';
import { RumEventCategory } from '../../../types';
import { RumEventType } from '../../../typesV2';
import { LifeCycleEventType } from '../../lifeCycle';
import { matchRequestTiming } from './matchRequestTiming';
import { computePerformanceResourceDetails, computePerformanceResourceDuration, computeResourceKind, computeSize, isRequestKind, } from './resourceUtils';
export function startResourceCollection(lifeCycle, configuration, session) {
    lifeCycle.subscribe(LifeCycleEventType.REQUEST_COMPLETED, function (request) {
        if (session.isTrackedWithResource()) {
            configuration.isEnabled('v2_format')
                ? lifeCycle.notify(LifeCycleEventType.RAW_RUM_EVENT_V2_COLLECTED, processRequestV2(request))
                : lifeCycle.notify(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, processRequest(request));
        }
    });
    lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {
        if (session.isTrackedWithResource() && entry.entryType === 'resource' && !isRequestKind(entry)) {
            configuration.isEnabled('v2_format')
                ? lifeCycle.notify(LifeCycleEventType.RAW_RUM_EVENT_V2_COLLECTED, processResourceEntryV2(entry))
                : lifeCycle.notify(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, processResourceEntry(entry));
        }
    });
}
function processRequest(request) {
    var kind = request.type === RequestType.XHR ? ResourceType.XHR : ResourceType.FETCH;
    var matchingTiming = matchRequestTiming(request);
    var startTime = matchingTiming ? matchingTiming.startTime : request.startTime;
    var correspondingTimingOverrides = matchingTiming ? computePerformanceEntryMetrics(matchingTiming) : undefined;
    var tracingInfo = computeRequestTracingInfo(request);
    var resourceEvent = combine({
        date: getTimestamp(startTime),
        duration: msToNs(request.duration),
        evt: {
            category: RumEventCategory.RESOURCE,
        },
        http: {
            method: request.method,
            statusCode: request.status,
            url: request.url,
        },
        resource: {
            kind: kind,
        },
    }, tracingInfo, correspondingTimingOverrides);
    return { startTime: startTime, rawRumEvent: resourceEvent };
}
function processRequestV2(request) {
    var type = request.type === RequestType.XHR ? ResourceType.XHR : ResourceType.FETCH;
    var matchingTiming = matchRequestTiming(request);
    var startTime = matchingTiming ? matchingTiming.startTime : request.startTime;
    var correspondingTimingOverrides = matchingTiming ? computePerformanceEntryMetricsV2(matchingTiming) : undefined;
    var tracingInfo = computeRequestTracingInfo(request);
    var resourceEvent = combine({
        date: getTimestamp(startTime),
        resource: {
            type: type,
            duration: msToNs(request.duration),
            method: request.method,
            statusCode: request.status,
            url: request.url,
        },
        type: RumEventType.RESOURCE,
    }, tracingInfo, correspondingTimingOverrides);
    return { startTime: startTime, rawRumEvent: resourceEvent };
}
function processResourceEntry(entry) {
    var resourceKind = computeResourceKind(entry);
    var entryMetrics = computePerformanceEntryMetrics(entry);
    var tracingInfo = computeEntryTracingInfo(entry);
    var resourceEvent = combine({
        date: getTimestamp(entry.startTime),
        evt: {
            category: RumEventCategory.RESOURCE,
        },
        http: {
            url: entry.name,
        },
        resource: {
            kind: resourceKind,
        },
    }, tracingInfo, entryMetrics);
    return { startTime: entry.startTime, rawRumEvent: resourceEvent };
}
function processResourceEntryV2(entry) {
    var type = computeResourceKind(entry);
    var entryMetrics = computePerformanceEntryMetricsV2(entry);
    var tracingInfo = computeEntryTracingInfo(entry);
    var resourceEvent = combine({
        date: getTimestamp(entry.startTime),
        resource: {
            type: type,
            url: entry.name,
        },
        type: RumEventType.RESOURCE,
    }, tracingInfo, entryMetrics);
    return { startTime: entry.startTime, rawRumEvent: resourceEvent };
}
function computePerformanceEntryMetrics(timing) {
    return {
        duration: computePerformanceResourceDuration(timing),
        http: {
            performance: computePerformanceResourceDetails(timing),
        },
        network: {
            bytesWritten: computeSize(timing),
        },
    };
}
function computePerformanceEntryMetricsV2(timing) {
    return {
        resource: __assign({ duration: computePerformanceResourceDuration(timing), size: computeSize(timing) }, computePerformanceResourceDetails(timing)),
    };
}
function computeRequestTracingInfo(request) {
    var hasBeenTraced = request.traceId && request.spanId;
    if (!hasBeenTraced) {
        return undefined;
    }
    return {
        _dd: {
            spanId: request.spanId.toDecimalString(),
            traceId: request.traceId.toDecimalString(),
        },
        resource: { id: generateUUID() },
    };
}
function computeEntryTracingInfo(entry) {
    return entry.traceId ? { _dd: { traceId: entry.traceId } } : undefined;
}
//# sourceMappingURL=resourceCollection.js.map