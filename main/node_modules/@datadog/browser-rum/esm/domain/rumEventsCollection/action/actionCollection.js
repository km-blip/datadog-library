import { __assign } from "tslib";
import { combine, getTimestamp, msToNs } from '@datadog/browser-core';
import { RumEventCategory } from '../../../types';
import { RumEventType } from '../../../typesV2';
import { LifeCycleEventType } from '../../lifeCycle';
import { ActionType, trackActions } from './trackActions';
export function startActionCollection(lifeCycle, configuration) {
    lifeCycle.subscribe(LifeCycleEventType.AUTO_ACTION_COMPLETED, function (action) {
        configuration.isEnabled('v2_format')
            ? lifeCycle.notify(LifeCycleEventType.RAW_RUM_EVENT_V2_COLLECTED, processActionV2(action))
            : lifeCycle.notify(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, processAction(action));
    });
    if (configuration.trackInteractions) {
        trackActions(lifeCycle);
    }
    return {
        addAction: function (action, savedGlobalContext) {
            configuration.isEnabled('v2_format')
                ? lifeCycle.notify(LifeCycleEventType.RAW_RUM_EVENT_V2_COLLECTED, __assign({ savedGlobalContext: savedGlobalContext }, processActionV2(action)))
                : lifeCycle.notify(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, __assign({ savedGlobalContext: savedGlobalContext }, processAction(action)));
        },
    };
}
function processAction(action) {
    var autoActionProperties = isAutoAction(action)
        ? {
            duration: msToNs(action.duration),
            userAction: {
                id: action.id,
                measures: action.counts,
            },
        }
        : undefined;
    var customerContext = !isAutoAction(action) ? action.context : undefined;
    var actionEvent = combine({
        date: getTimestamp(action.startTime),
        evt: {
            category: RumEventCategory.USER_ACTION,
            name: action.name,
        },
        userAction: {
            type: action.type,
        },
    }, autoActionProperties);
    return {
        customerContext: customerContext,
        rawRumEvent: actionEvent,
        startTime: action.startTime,
    };
}
function processActionV2(action) {
    var autoActionProperties = isAutoAction(action)
        ? {
            action: {
                error: {
                    count: action.counts.errorCount,
                },
                id: action.id,
                loadingTime: msToNs(action.duration),
                longTask: {
                    count: action.counts.longTaskCount,
                },
                resource: {
                    count: action.counts.resourceCount,
                },
            },
        }
        : undefined;
    var customerContext = !isAutoAction(action) ? action.context : undefined;
    var actionEvent = combine({
        action: {
            target: {
                name: action.name,
            },
            type: action.type,
        },
        date: getTimestamp(action.startTime),
        type: RumEventType.ACTION,
    }, autoActionProperties);
    return {
        customerContext: customerContext,
        rawRumEvent: actionEvent,
        startTime: action.startTime,
    };
}
function isAutoAction(action) {
    return action.type !== ActionType.CUSTOM;
}
//# sourceMappingURL=actionCollection.js.map