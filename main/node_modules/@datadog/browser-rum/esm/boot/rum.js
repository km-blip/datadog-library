import { combine, commonInit } from '@datadog/browser-core';
import { startDOMMutationCollection } from '../browser/domMutationCollection';
import { startPerformanceCollection } from '../browser/performanceCollection';
import { startRumAssembly } from '../domain/assembly';
import { startRumAssemblyV2 } from '../domain/assemblyV2';
import { startInternalContext } from '../domain/internalContext';
import { LifeCycle } from '../domain/lifeCycle';
import { startParentContexts } from '../domain/parentContexts';
import { startRequestCollection } from '../domain/requestCollection';
import { startActionCollection } from '../domain/rumEventsCollection/action/actionCollection';
import { startErrorCollection } from '../domain/rumEventsCollection/error/errorCollection';
import { startLongTaskCollection } from '../domain/rumEventsCollection/longTask/longTaskCollection';
import { startResourceCollection } from '../domain/rumEventsCollection/resource/resourceCollection';
import { startViewCollection } from '../domain/rumEventsCollection/view/viewCollection';
import { startRumSession } from '../domain/rumSession';
import { startRumBatch } from '../transport/batch';
import { buildEnv } from './buildEnv';
export function startRum(userConfiguration, getGlobalContext) {
    var lifeCycle = new LifeCycle();
    var _a = commonInit(userConfiguration, buildEnv), configuration = _a.configuration, internalMonitoring = _a.internalMonitoring;
    var session = startRumSession(configuration, lifeCycle);
    internalMonitoring.setExternalContextProvider(function () {
        return combine({
            application_id: userConfiguration.applicationId,
        }, parentContexts.findView(), getGlobalContext());
    });
    var _b = startRumEventCollection(userConfiguration.applicationId, location, lifeCycle, configuration, session, getGlobalContext), parentContexts = _b.parentContexts, addError = _b.addError, addAction = _b.addAction;
    startRequestCollection(lifeCycle, configuration);
    startPerformanceCollection(lifeCycle, configuration);
    startDOMMutationCollection(lifeCycle);
    var internalContext = startInternalContext(userConfiguration.applicationId, session, parentContexts, configuration);
    return {
        addAction: addAction,
        addError: addError,
        getInternalContext: internalContext.get,
    };
}
export function startRumEventCollection(applicationId, location, lifeCycle, configuration, session, getGlobalContext) {
    var parentContexts = startParentContexts(lifeCycle, session);
    var batch = startRumBatch(configuration, lifeCycle);
    startRumAssembly(applicationId, configuration, lifeCycle, session, parentContexts, getGlobalContext);
    startRumAssemblyV2(applicationId, configuration, lifeCycle, session, parentContexts, getGlobalContext);
    startLongTaskCollection(lifeCycle, configuration);
    startResourceCollection(lifeCycle, configuration, session);
    startViewCollection(lifeCycle, configuration, location);
    var addError = startErrorCollection(lifeCycle, configuration).addError;
    var addAction = startActionCollection(lifeCycle, configuration).addAction;
    return {
        addAction: addAction,
        addError: addError,
        parentContexts: parentContexts,
        stop: function () {
            // prevent batch from previous tests to keep running and send unwanted requests
            // could be replaced by stopping all the component when they will all have a stop method
            batch.stop();
        },
    };
}
//# sourceMappingURL=rum.js.map