"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var browser_core_1 = require("@datadog/browser-core");
var typesV2_1 = require("../typesV2");
var lifeCycle_1 = require("./lifeCycle");
var SessionType;
(function (SessionType) {
    SessionType["SYNTHETICS"] = "synthetics";
    SessionType["USER"] = "user";
})(SessionType || (SessionType = {}));
function startRumAssemblyV2(applicationId, configuration, lifeCycle, session, parentContexts, getGlobalContext) {
    lifeCycle.subscribe(lifeCycle_1.LifeCycleEventType.RAW_RUM_EVENT_V2_COLLECTED, function (_a) {
        var startTime = _a.startTime, rawRumEvent = _a.rawRumEvent, savedGlobalContext = _a.savedGlobalContext, customerContext = _a.customerContext;
        var viewContext = parentContexts.findViewV2(startTime);
        if (session.isTracked() && viewContext && viewContext.session.id) {
            var actionContext = parentContexts.findActionV2(startTime);
            var rumContext = {
                _dd: {
                    formatVersion: 2,
                },
                application: {
                    id: applicationId,
                },
                date: new Date().getTime(),
                service: configuration.service,
                session: {
                    // must be computed on each event because synthetics instrumentation can be done after sdk execution
                    // cf https://github.com/puppeteer/puppeteer/issues/3667
                    type: getSessionType(),
                },
            };
            var rumEvent = needToAssembleWithAction(rawRumEvent)
                ? browser_core_1.combine(rumContext, viewContext, actionContext, rawRumEvent)
                : browser_core_1.combine(rumContext, viewContext, rawRumEvent);
            var serverRumEvent = browser_core_1.withSnakeCaseKeys(rumEvent);
            serverRumEvent.context = browser_core_1.combine(savedGlobalContext || getGlobalContext(), customerContext);
            lifeCycle.notify(lifeCycle_1.LifeCycleEventType.RUM_EVENT_V2_COLLECTED, { rumEvent: rumEvent, serverRumEvent: serverRumEvent });
        }
    });
}
exports.startRumAssemblyV2 = startRumAssemblyV2;
function needToAssembleWithAction(event) {
    return [typesV2_1.RumEventType.ERROR, typesV2_1.RumEventType.RESOURCE, typesV2_1.RumEventType.LONG_TASK].indexOf(event.type) !== -1;
}
function getSessionType() {
    return window._DATADOG_SYNTHETICS_BROWSER === undefined ? SessionType.USER : SessionType.SYNTHETICS;
}
//# sourceMappingURL=assemblyV2.js.map